const canvas = document.querySelector("#paintField");
const clearBtn = document.querySelector("#clear");
const sadBtn = document.querySelector("#sad");
const happyBtn = document.querySelector("#happy");
const angryBtn = document.querySelector("#angry");
const surprisedBtn = document.querySelector("#surprised");
const trainBtn = document.querySelector("#train");
const predictBtn = document.querySelector("#predict");
const saveBtn = document.querySelector("#save");
const colorPicker = document.querySelector("#colorPicker");
const loadInput = document.querySelector("#load");
const fileNameSpan = document.querySelector("#file-name");

loadInput.addEventListener("change", (event) => {
  const fileName = event.target.files[0] ? event.target.files[0].name : "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω";
  fileNameSpan.textContent = fileName;
});

// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–∞ canvas
const ctx = canvas.getContext("2d");

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è (10x10 –ø–∏–∫—Å–µ–ª–µ–π)
const paintField = new Array(100).fill(false);

// –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
const trainData = [];

let mouseDown = false;
let touchActive = false;
let happyCount = 0;
let sadCount = 0;
let angryCount = 0;
let surprisedCount = 0;
let selectedColor = colorPicker.value;

/**
 * –†–∏—Å—É–µ—Ç —Å–µ—Ç–∫—É –Ω–∞ canvas.
 */
const drawGrid = () => {
  ctx.strokeStyle = "#CCC";

  for (let i = 1; i < 10; i++) {
    ctx.moveTo(0, i * 40);
    ctx.lineTo(400, i * 40);
    ctx.moveTo(i * 40, 0);
    ctx.lineTo(i * 40, 400);
  }

  ctx.stroke();
};

/**
 * –û—á–∏—â–∞–µ—Ç canvas –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–µ—Ç–∫—É.
 */
const clearCanvas = () => {
  ctx.fillStyle = "#FFF";
  ctx.fillRect(0, 0, 400, 400);
  drawGrid();
};

/**
 * –†–∏—Å—É–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ –Ω–∞ canvas.
 * @param {number} row - –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —è—á–µ–π–∫–∏
 * @param {number} column - –ù–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ —è—á–µ–π–∫–∏
 * @param {string} color - –¶–≤–µ—Ç –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ –∫–≤–∞–¥—Ä–∞—Ç–∞
 */
const drawSquare = (row, column, color) => {
  ctx.fillStyle = color;
  ctx.fillRect(column * 40 + 1, row * 40 + 1, 38, 38);
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–∞ canvas –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏ –∏–ª–∏ —Å–µ–Ω—Å–æ—Ä–∞.
 * @param {number} offsetX - –°–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å–∏ X
 * @param {number} offsetY - –°–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å–∏ Y
 */
const draw = (offsetX, offsetY) => {
  const rowIndex = Math.floor(offsetY / 40);
  const columnIndex = Math.floor(offsetX / 40);
  const arrayIndex = rowIndex * 10 + columnIndex;

  if (arrayIndex >= 0 && arrayIndex < paintField.length && !paintField[arrayIndex]) {
    paintField[arrayIndex] = true;
    drawSquare(rowIndex, columnIndex, selectedColor);
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –ø–æ canvas.
 * @param {MouseEvent} event - –°–æ–±—ã—Ç–∏–µ –º—ã—à–∏
 */
const handleMouseMove = (event) => {
  if (!mouseDown) return;
  const offsetX = Math.min(Math.max(event.offsetX, 0), 399);
  const offsetY = Math.min(Math.max(event.offsetY, 0), 399);
  draw(offsetX, offsetY);
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–∞–ª—å—Ü–∞ –ø–æ canvas.
 * @param {TouchEvent} event - –°–µ–Ω—Å–æ—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
 */
const handleTouchMove = (event) => {
  if (!touchActive) return;
  const touch = event.touches[0];
  const rect = canvas.getBoundingClientRect();
  const offsetX = Math.min(Math.max(touch.clientX - rect.left, 0), 399);
  const offsetY = Math.min(Math.max(touch.clientY - rect.top, 0), 399);
  draw(offsetX, offsetY);
};

const clearField = () => {
  paintField.fill(false);
  clearCanvas();
};

const updateInterface = () => {
  happyBtn.innerText = `üòÄ ${happyCount}`;
  sadBtn.innerText = `üôÅ ${sadCount}`;
  angryBtn.innerText = `üò° ${angryCount}`;
  surprisedBtn.innerText = `üò≤ ${surprisedCount}`;
};

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏—Å—É–Ω–∫–∞ –∏ –µ–≥–æ –º–µ—Ç–∫—É –≤ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è.
 * @param {number[]} value - –ú–µ—Ç–∫–∞ —Ä–∏—Å—É–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, [1, 0, 0, 0] –¥–ª—è —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ, [0, 1, 0, 0] –¥–ª—è –≥—Ä—É—Å—Ç–Ω–æ–≥–æ)
 */
const storeResult = (value) => {
  trainData.push({ paintField: [...paintField], label: value });
  if (value[0] === 1) happyCount++;
  else if (value[1] === 1) sadCount++;
  else if (value[2] === 1) angryCount++;
  else if (value[3] === 1) surprisedCount++;
  updateInterface();
  clearField();
};

// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª JSON
const saveTrainingData = () => {
  const jsonData = JSON.stringify(trainData);
  const blob = new Blob([jsonData], { type: "application/json" });
  const url = URL.createObjectURL(blob);

  const a = document.createElement("a");
  a.href = url;
  a.download = "trainData.json";
  document.body.appendChild(a);
  a.click();

  setTimeout(() => {
    URL.revokeObjectURL(url);
    document.body.removeChild(a);
    alert("–î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª trainData.json!");
  }, 0);
};

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ JSON
const loadTrainingData = (event) => {
  const file = event.target.files[0];
  const reader = new FileReader();

  reader.onload = (e) => {
    try {
      const jsonData = e.target.result;
      const loadedData = JSON.parse(jsonData);
      const existingDataCount = trainData.length;

      loadedData.forEach((data) => {
        const duplicate = trainData.some(
          (d) => JSON.stringify(d.paintField) === JSON.stringify(data.paintField)
        );
        if (!duplicate) {
          trainData.push(data);
          if (data.label[0] === 1) happyCount++;
          if (data.label[1] === 1) sadCount++;
          if (data.label[2] === 1) angryCount++;
          if (data.label[3] === 1) surprisedCount++;
        }
      });

      if (trainData.length > existingDataCount) {
        updateInterface();
        alert("–î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
      } else {
        alert("–í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö!");
      }
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: " + error.message);
    }
  };

  reader.readAsText(file);
};

loadInput.addEventListener("change", loadTrainingData);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º—ã—à—å—é –∏ —Å–µ–Ω—Å–æ—Ä–∞–º–∏
document.addEventListener("mousedown", () => (mouseDown = true));
document.addEventListener("mouseup", () => (mouseDown = false));
document.addEventListener("touchstart", () => (touchActive = true));
document.addEventListener("touchend", () => (touchActive = false));

canvas.addEventListener("mousemove", handleMouseMove);
canvas.addEventListener("touchmove", handleTouchMove);

clearBtn.addEventListener("click", clearField);

happyBtn.addEventListener("click", () => {
  storeResult([1, 0, 0, 0]);
});

sadBtn.addEventListener("click", () => {
  storeResult([0, 1, 0, 0]);
});

angryBtn.addEventListener("click", () => {
  storeResult([0, 0, 1, 0]);
});

surprisedBtn.addEventListener("click", () => {
  storeResult([0, 0, 0, 1]);
});

predictBtn.addEventListener("click", async () => {
  const inputTensor = preprocessDrawing(paintField);
  const prediction = model.predict(inputTensor);
  const [happiness, sadness, anger, surprise] = await prediction.data();

  const emotions = ["—Å—á–∞—Å—Ç–ª–∏–≤–æ–µ", "–≥—Ä—É—Å—Ç–Ω–æ–µ", "–∑–ª–æ–µ", "—É–¥–∏–≤–ª–µ–Ω–Ω–æ–µ"];
  const scores = [happiness, sadness, anger, surprise];
  const maxIndex = scores.indexOf(Math.max(...scores));

  alert(
    `–Ø –¥—É–º–∞—é —ç—Ç–æ ${emotions[maxIndex]} –ª–∏—Ü–æ!\n–°—á–∞—Å—Ç—å–µ: ${Math.round(
      happiness * 100
    )}% –ì—Ä—É—Å—Ç—å: ${Math.round(sadness * 100)}% –ó–ª–æ—Å—Ç—å: ${Math.round(
      anger * 100
    )}% –£–¥–∏–≤–ª–µ–Ω–∏–µ: ${Math.round(surprise * 100)}%`
  );
});

trainBtn.addEventListener("click", async () => {
  await trainModel(trainData);
  predictBtn.disabled = false;
  alert("–Ø –æ–±—É—á–∏–ª—Å—è!");
});

saveBtn.addEventListener("click", saveTrainingData);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞ –≤ colorPicker
colorPicker.addEventListener("input", (e) => {
  selectedColor = e.target.value;
});

// –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
updateInterface();
clearCanvas();

