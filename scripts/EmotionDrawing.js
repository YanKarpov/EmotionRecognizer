// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ canvas –∏ –∫–Ω–æ–ø–æ–∫
const canvas = document.querySelector("#paintField");
const clearBtn = document.querySelector("#clear");
const sadBtn = document.querySelector("#sad");
const happyBtn = document.querySelector("#happy");
const angryBtn = document.querySelector("#angry");
const surprisedBtn = document.querySelector("#surprised");
const trainBtn = document.querySelector("#train");
const predictBtn = document.querySelector("#predict");
const saveBtn = document.querySelector("#save");
const loadInput = document.querySelector("#load");
const colorPicker = document.querySelector("#colorPicker");

// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–∞ canvas
const ctx = canvas.getContext("2d");

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è (10x10 –ø–∏–∫—Å–µ–ª–µ–π)
const paintField = new Array(100).fill(false);

// –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
const trainData = [];

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
let mouseDown = false;
let happyCount = 0;
let sadCount = 0;
let angryCount = 0;
let surprisedCount = 0;
let selectedColor = colorPicker.value;

/**
 * –†–∏—Å—É–µ—Ç —Å–µ—Ç–∫—É –Ω–∞ canvas.
 */
function drawGrid() {
  ctx.strokeStyle = "#CCC";

  for (let i = 1; i < 10; i++) {
    ctx.moveTo(0, i * 40);
    ctx.lineTo(400, i * 40);
    ctx.moveTo(i * 40, 0);
    ctx.lineTo(i * 40, 400);
  }

  ctx.stroke();
}

/**
 * –û—á–∏—â–∞–µ—Ç canvas –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–µ—Ç–∫—É.
 */
function clearCanvas() {
  ctx.fillStyle = "#FFF";
  ctx.fillRect(0, 0, 400, 400);
  drawGrid();
}

/**
 * –†–∏—Å—É–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ –Ω–∞ canvas.
 * @param {number} row - –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —è—á–µ–π–∫–∏
 * @param {number} column - –ù–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ —è—á–µ–π–∫–∏
 * @param {string} color - –¶–≤–µ—Ç –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ –∫–≤–∞–¥—Ä–∞—Ç–∞
 */
function drawSquare(row, column, color) {
  ctx.fillStyle = color;
  ctx.fillRect(column * 40 + 1, row * 40 + 1, 38, 38);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–∞ canvas –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏.
 * @param {MouseEvent} event - –°–æ–±—ã—Ç–∏–µ –º—ã—à–∏
 */
function draw(event) {
  const offsetX = Math.min(Math.max(event.offsetX, 0), 399);
  const offsetY = Math.min(Math.max(event.offsetY, 0), 399);

  const rowIndex = Math.floor(offsetY / 40);
  const columnIndex = Math.floor(offsetX / 40);
  const arrayIndex = rowIndex * 10 + columnIndex;

  if (arrayIndex >= 0 && arrayIndex < paintField.length) {
    paintField[arrayIndex] = true;
    drawSquare(rowIndex, columnIndex, selectedColor);
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –ø–æ–ª–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è (paintField).
 */
function clearField() {
  paintField.fill(false);
  clearCanvas();
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö, –≥—Ä—É—Å—Ç–Ω—ã—Ö, –∑–ª—ã—Ö –∏ —É–¥–∏–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∏—Å—É–Ω–∫–æ–≤.
 */
function updateInterface() {
  happyBtn.innerText = `üòÄ ${happyCount}`;
  sadBtn.innerText = `üôÅ ${sadCount}`;
  angryBtn.innerText = `üò° ${angryCount}`;
  surprisedBtn.innerText = `üò≤ ${surprisedCount}`;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏—Å—É–Ω–∫–∞ –∏ –µ–≥–æ –º–µ—Ç–∫—É –≤ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è.
 * @param {number[]} value - –ú–µ—Ç–∫–∞ —Ä–∏—Å—É–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, [1, 0, 0, 0] –¥–ª—è —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ, [0, 1, 0, 0] –¥–ª—è –≥—Ä—É—Å—Ç–Ω–æ–≥–æ)
 */
function storeResult(value) {
  trainData.push({ paintField: [...paintField], label: value });
  if (value[0] === 1) happyCount++;
  else if (value[1] === 1) sadCount++;
  else if (value[2] === 1) angryCount++;
  else if (value[3] === 1) surprisedCount++;
  updateInterface();
  clearField();
}

// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª JSON
function saveTrainingData() {
  const jsonData = JSON.stringify(trainData);
  const blob = new Blob([jsonData], { type: 'application/json' });
  const url = URL.createObjectURL(blob);

  const a = document.createElement('a');
  a.href = url;
  a.download = 'trainData.json';
  document.body.appendChild(a);
  a.click();

  setTimeout(() => {
    URL.revokeObjectURL(url);
    document.body.removeChild(a);
    alert("–î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª trainData.json!");
  }, 0);
}

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ JSON
function loadTrainingData(event) {
  const file = event.target.files[0];
  const reader = new FileReader();

  reader.onload = function (e) {
    const jsonData = e.target.result;
    const loadedData = JSON.parse(jsonData);
    trainData.push(...loadedData);

    loadedData.forEach(data => {
      if (data.label[0] === 1) happyCount++;
      if (data.label[1] === 1) sadCount++;
      if (data.label[2] === 1) angryCount++;
      if (data.label[3] === 1) surprisedCount++;
    });

    updateInterface();
    alert("–î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
  };

  reader.readAsText(file);
}

loadInput.addEventListener('change', loadTrainingData);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º—ã—à—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
document.addEventListener("mousedown", () => (mouseDown = true));
document.addEventListener("mouseup", () => (mouseDown = false));

canvas.addEventListener("mousemove", (e) => {
  if (mouseDown) draw(e);
});

clearBtn.addEventListener("click", clearField);

happyBtn.addEventListener("click", () => {
  storeResult([1, 0, 0, 0]);
});

sadBtn.addEventListener("click", () => {
  storeResult([0, 1, 0, 0]);
});

angryBtn.addEventListener("click", () => {
  storeResult([0, 0, 1, 0]);
});

surprisedBtn.addEventListener("click", () => {
  storeResult([0, 0, 0, 1]);
});

predictBtn.addEventListener("click", () => {
  const inputTensor = preprocessDrawing(paintField);
  const prediction = model.predict(inputTensor);
  const [happiness, sadness, anger, surprise] = prediction.dataSync();

  const emotions = ["—Å—á–∞—Å—Ç–ª–∏–≤–æ–µ", "–≥—Ä—É—Å—Ç–Ω–æ–µ", "–∑–ª–æ–µ", "—É–¥–∏–≤–ª–µ–Ω–Ω–æ–µ"];
  const scores = [happiness, sadness, anger, surprise];
  const maxIndex = scores.indexOf(Math.max(...scores));

  alert(
    `–Ø –¥—É–º–∞—é —ç—Ç–æ ${emotions[maxIndex]} –ª–∏—Ü–æ!\n–°—á–∞—Å—Ç—å–µ: ${Math.round(happiness * 100)}% –ì—Ä—É—Å—Ç—å: ${Math.round(sadness * 100)}% –ó–ª–æ—Å—Ç—å: ${Math.round(anger * 100)}% –£–¥–∏–≤–ª–µ–Ω–∏–µ: ${Math.round(surprise * 100)}%`
  );
});

trainBtn.addEventListener("click", () => {
  trainModel(trainData).then(() => {
    predictBtn.disabled = false;
    alert("–Ø –æ–±—É—á–∏–ª—Å—è!");
  });
});

saveBtn.addEventListener("click", saveTrainingData);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞ –≤ colorPicker
colorPicker.addEventListener("input", (e) => {
  selectedColor = e.target.value;
});

// –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
updateInterface();
clearCanvas();
